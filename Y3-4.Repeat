from time import sleep
#импортируем модуль sleep(задержки во времени)

class RepeatDecorator:
    def __init__(self, call_count, start_sleep_time, factor, border_sleep_time):
        self.call_count = call_count
        self.start_sleep_time = start_sleep_time
        self.factor = factor
        self.border_sleep_time = border_sleep_time
#создадим класс и инициалицируем переменные
    def __call__(self, func):
#добавим метод (__сall__), которые позволит вызвать класс как функцию    
        def wrapper(num):
            print(f"Количество запусков  = {self.call_count}")
            print("Начало работы")
            for n, i in enumerate(range(self.call_count)):
                t = self.start_sleep_time * self.factor ** (n + 1)
                t = t if t <= self.border_sleep_time else self.border_sleep_time
                sleep(t)    
                result = func(num)
                print(f"Запуск номер {n+1}. Ожидание: {t} секунд. Результат декорируемой функции = {result}")
            print("Конец работы")
         return wrapper


@RepeatDecorator(call_count=3, start_sleep_time=1, factor=2, border_sleep_time=10)
def multiplier(num):
    return num * 2
#задекорируем функцию multiplier и попробуем число вызовов 3, остальные аргументы добавим рандомно

multiplier(4)
